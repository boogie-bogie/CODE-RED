name: Deploy to Amazon ECS

on:
  push:
	  # 브랜치명과 일치시킨다.
    branches: [ deploy-to-ecs-fargate ] #main 

env:
  AWS_REGION: ap-northeast-2              # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: codered-web-repository          # set this to your Amazon ECR repository name
  ECS_SERVICE: codered-web-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: DevCluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./codered-task-definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: codered-web           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  id-token: write
  contents: read

jobs:
  # CI job
  test:
    runs-on: ubuntu-22.04
    steps:
      - name: CheckOut repository
        uses: actions/checkout@v3
      - name: Build and test with Docker Compose
        run: docker-compose -f docker-compose.yaml up --build --abort-on-container-exit

  # CD job
  deploy:
    runs-on: [ ubuntu-latest ]
    environment: production

    strategy:
	    fail-fast: false # 테스트 실패시 중단 설정 false

    steps:
      - name: Checkout source
        uses: actions/checkout@v3
        # 여기에서 AWS-CLI 인증 절차를 수행함. IAM 사용자 설정에서 PowerUser 권한이 있으면 로그인이 될 것임.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }} #액세스키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} #시크릿 액세스키
          aws-region: ${{ env.AWS_REGION }} #지역

        # ECR 로그인 작업을 통해서 '푸시명령보기'에서 진행했던 작업을 모두 자동화할 수 있음.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'
          
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }} #:latest 가 아닌 sha 태그를 사용한다.

        run:
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT   

				# AWS ECS에서 해야할 task-definition 작업을 task-definition.json 파일과 설정을 일치시킴으로써 자동화
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }} 
          container-name: ${{ env.CONTAINER_NAME }} 
          image: ${{ steps.build-image.outputs.image }}   

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }} 
          cluster: ${{ env.ECS_CLUSTER }} 
          wait-for-service-stability: true